
import java.io.IOException;  
import java.io.PrintWriter;  
  
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.stream.Collectors;

import javax.servlet.*;  
import javax.servlet.http.HttpServletRequest;
  
public class MyFilter implements Filter{ 
	
	public static void main(String[] args) {
		System.out.println("i am coming here ");
	}
  
public void init(FilterConfig arg0) throws ServletException {}  
      
public void doFilter(ServletRequest req, ServletResponse resp,  
    FilterChain chain) throws IOException, ServletException {  

	System.out.println("filter is invoked before ");
	
	System.out.println(httpServletRequestToString((HttpServletRequest) req));
System.out.println(req.toString());
    Enumeration<String> params = req.getAttributeNames();
    while(params.hasMoreElements()){
     String paramName = params.nextElement();
     System.out.println("Parameter Name - "+paramName+", Value - "+req.getParameter(paramName));
    }
          
    chain.doFilter(req, resp);//sends request to next resource  
	System.out.println("filter is invoked after");     
 
    }  
    public void destroy() {} 
    
    private String httpServletRequestToString(HttpServletRequest request) {
        StringBuilder sb = new StringBuilder();

        sb.append("Request Method = [" + request.getMethod() + "], ");
        sb.append("Request URL Path = [" + request.getRequestURL() + "], ");

        String headers =
            Collections.list(request.getHeaderNames()).stream()
                .map(headerName -> headerName + " : " + Collections.list(request.getHeaders(headerName)) )
                .collect(Collectors.joining(", "));

        if (headers.isEmpty()) {
            sb.append("Request headers: NONE,");
        } else {
            sb.append("Request headers: ["+headers+"],");
        }

        String parameters =
            Collections.list(request.getParameterNames()).stream()
                .map(p -> p + " : " + Arrays.asList( request.getParameterValues(p)) )
                .collect(Collectors.joining(", "));             

        if (parameters.isEmpty()) {
            sb.append("Request parameters: NONE.");
        } else {
            sb.append("Request parameters: [" + parameters + "].");
        }

        String body = null;
		try {
			body = request.getReader().lines().collect(Collectors.joining(System.lineSeparator()));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

            if (body.isEmpty()) {
                sb.append("Request body: NONE,");
            } else {
                sb.append("Request body: ["+body+"],");
            }
        return sb.toString();
    }
} 
